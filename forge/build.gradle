plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    forge {
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modApi "earth.terrarium:botarium-forge-$rootProject.minecraft_version:$rootProject.botarium_version"
    modApi "com.teamresourceful.resourcefullib:resourcefullib-forge-$rootProject.minecraft_version:$rootProject.resourcefullib_version"
}

processResources {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def propertyMap = [
            "mod_version"          : mod_version,
            "minecraft_version"    : minecraft_version,
            "forge_loader_version" : forge_loader_version,
            "forge_api_version"    : forge_api_version,
            "mod_id"               : mod_id,
            "mod_name"             : mod_name,
            "mod_description"      : mod_description,
            "mod_authors"          : mod_authors.tokenize(/, */).join(', '),
            "mod_display_url"      : mod_display_url,
            "mod_issue_tracker_url": mod_issue_tracker_url,
            "mod_repo_url"         : mod_repo_url,
            "mod_license"          : mod_license
    ]

    propertyMap.forEach { k, v -> inputs.property k, v }

    filesMatching("mods.toml") {
        filter { String line ->
            propertyMap.forEach { k, v -> line = line.replaceAll("r-$k-r", v) }
            return line
        }
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name

            //noinspection GroovyAssignabilityCheck
            artifact remapJar
            //noinspection GroovyAssignabilityCheck
            artifact(sourcesJar) {
                //noinspection GroovyAssignabilityCheck
                builtBy remapSourcesJar
            }

            //noinspection GroovyAssignabilityCheck
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

loom.disableDeprecatedPomGeneration(publishing.publications.mavenForge as MavenPublication)

signing {
    // See https://docs.gradle.org/current/userguide/signing_plugin.html for information on how to set up signing.
    sign publishing.publications.mavenForge
}
