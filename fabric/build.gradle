plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    include modImplementation("earth.terrarium:botarium-fabric-$rootProject.minecraft_version:$rootProject.botarium_version")
    include modApi("com.teamresourceful.resourcefullib:resourcefullib-fabric-$rootProject.minecraft_version:$rootProject.resourcefullib_version")
}

processResources {
    inputs.property "mod_version"          , project.mod_version
    inputs.property "minecraft_version"    , rootProject.minecraft_version
    inputs.property "fabric_loader_version", rootProject.fabric_loader_version
    inputs.property "fabric_api_version"   , rootProject.fabric_api_version
    inputs.property "mod_id"               , rootProject.mod_id
    inputs.property "mod_name"             , rootProject.mod_name
    inputs.property "mod_description"      , rootProject.mod_description
    inputs.property "mod_authors"          , rootProject.mod_authors.tokenize(/, */).join(',')
    inputs.property "mod_display_url"      , rootProject.mod_display_url
    inputs.property "mod_issue_tracker_url", rootProject.mod_issue_tracker_url
    inputs.property "mod_repo_url"         , rootProject.mod_repo_url
    inputs.property "mod_license"          , rootProject.mod_license

    filesMatching("fabric.mod.json") {
        expand "mod_version"          : inputs.mod_version          .get()
        expand "mod_id"               : inputs.mod_id               .get()
        expand "mod_name"             : inputs.mod_name             .get()
        expand "mod_description"      : inputs.mod_description      .get()
        expand "mod_authors"          : inputs.mod_authors          .get()
        expand "mod_display_url"      : inputs.mod_display_url      .get()
        expand "mod_issue_tracker_url": inputs.mod_issue_tracker_url.get()
        expand "mod_repo_url"         : inputs.mod_repo_url         .get()
        expand "minecraft_version"    : inputs.minecraft_version    .get()
        expand "fabric_loader_version": inputs.fabric_loader_version.get()
        expand "fabric_api_version"   : inputs.fabric_api_version   .get()
        expand "mod_license"          : inputs.mod_license          .get()
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name

            artifact remapJar
            artifact(sourcesJar) { builtBy remapSourcesJar }

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

loom.disableDeprecatedPomGeneration(publishing.publications.mavenFabric as MavenPublication)

signing {
    // See https://docs.gradle.org/current/userguide/signing_plugin.html for information on how to set up signing.
    sign publishing.publications.mavenFabric
}
